"use client";
import "./globals.css";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { httpBatchLink } from "@trpc/client";
import { useState } from "react";
import { trpc } from "./utils/trpc";
import { ReactQueryStreamedHydration } from "@tanstack/react-query-next-experimental";

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
function makeQueryClient() {
  return new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 30 * 1000,
        gcTime: 1000,
      },
      hydrate: {
        // deserializeData: superjson.deserialize,
      },
    },
  });
}
let clientQueryClientSingleton: QueryClient;
function getQueryClient() {
  if (typeof window === "undefined") {
    // Server: always make a new query client
    return makeQueryClient();
  }
  // Browser: use singleton pattern to keep the same query client
  return (clientQueryClientSingleton ??= makeQueryClient());
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const queryClient = getQueryClient();
  const [trpcClient] = useState(() =>
    trpc.createClient({
      links: [
        httpBatchLink({
          url:
            typeof window === "undefined"
              ? "http://localhost:4101/apif"
              : "http://localhost:4101/api",
          // You can pass any HTTP headers you wish here
          async headers() {
            return {};
          },
        }),
      ],
    })
  );

  return (
    <html>
      <body style={{ margin: "20px" }}>
        <trpc.Provider client={trpcClient} queryClient={queryClient}>
          <QueryClientProvider client={queryClient}>
            <ReactQueryStreamedHydration>
              {children}
            </ReactQueryStreamedHydration>
            <ReactQueryDevtools />
          </QueryClientProvider>
        </trpc.Provider>
      </body>
    </html>
  );
}
